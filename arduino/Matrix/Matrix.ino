
#include <LedControl.h>
#include <DHT.h>

#include "MCP4725.h"
#include "Wire.h"

// #define __DUE__
#ifdef __DUE__
#include <DueTimer.h>
#endif

// Number of LED matrices
#define DEVICES 1

// LED matrix cell size
#define SIZE 8

#define LED_DATA 8
#define LED_CLK 9
#define LED_CS 10

LedControl lc = LedControl(LED_DATA, LED_CLK, LED_CS, DEVICES);

#define TEMP_DATA 6

DHT dht(TEMP_DATA, DHT11);

// DAC Chip
#define MCP_ADDR 0x60
MCP4725 MCP(MCP_ADDR);

#define PIR_DATA 2
#define PIR_SHOW_LED 13

#define PWM_LED PIR_SHOW_LED

unsigned long delaytime = 100;

#define ADD_NOISE 0

#define BOUNDS 0

void setup() {
  Serial.begin(115200);

  Wire.begin();
  // ESP32
  // MCP.begin(27, 26);
  // Wire.setClock(3400000);
  MCP.begin();
  Wire.setClock(800000);

  MCP.setValue(0);

  pinMode(PIR_DATA, INPUT);
  pinMode(PIR_SHOW_LED, OUTPUT);
  pinMode(PWM_LED, OUTPUT);

  analogWriteResolution(12);
  //  analogReadResolution(12);

  for (int d = 0; d < DEVICES; d++) {
    // Wake up
    lc.shutdown(d, false);

    // Med brighness
    lc.setIntensity(d, 12);

    // Fade brigthness
    // lc.setIntensity(d,1+d*d);

    // Clear
    lc.clearDisplay(d);
  }
}

byte font[128][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0000
  { 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0001
  { 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0002
  { 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0003
  { 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00 },  // 0004
  { 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00 },  // 0005
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00 },  // 0006
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00 },  // 0007
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },  // 0008
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00 },  // 0009
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00 },  // 000a
  { 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00 },  // 000b
  { 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00 },  // 000c
  { 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 000d
  { 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 000e
  { 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 000f
  { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 },  // 0010
  { 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00 },  // 0011
  { 0x00, 0x18, 0x3c, 0x7e, 0x7e, 0x3c, 0x18, 0x00 },  // 0012
  { 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x18 },  // 0013
  { 0x18, 0x24, 0x42, 0x81, 0x81, 0x42, 0x24, 0x18 },  // 0014
  { 0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x00 },  // 0015
  { 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00 },  // 0016
  { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 },  // 0017
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0018
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0019
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001a
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001b
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001c
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001d
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001e
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 001f
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0020 ' '
  { 0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00 },  // 0021 '!'
  { 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0022 '"'
  { 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00 },  // 0023 '#'
  { 0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00 },  // 0024 '$'
  { 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00 },  // 0025 '%'
  { 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00 },  // 0026 '&'
  { 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0027 '''
  { 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00 },  // 0028 '('
  { 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00 },  // 0029 ')'
  { 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00 },  // 002a '*'
  { 0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00 },  // 002b '+'
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60 },  // 002c ','
  { 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00 },  // 002d '-'
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00 },  // 002e '.'
  { 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00 },  // 002f '/'
  { 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00 },  // 0030 '0'
  { 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00 },  // 0031 '1'
  { 0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00 },  // 0032 '2'
  { 0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00 },  // 0033 '3'
  { 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00 },  // 0034 '4'
  { 0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00 },  // 0035 '5'
  { 0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00 },  // 0036 '6'
  { 0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00 },  // 0037 '7'
  { 0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00 },  // 0038 '8'
  { 0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00 },  // 0039 '9'
  { 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00 },  // 003a ':'
  { 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60 },  // 003b ';'
  { 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00 },  // 003c '<'
  { 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00 },  // 003d '='
  { 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00 },  // 003e '>'
  { 0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00 },  // 003f '?'
  { 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00 },  // 0040 '@'
  { 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00 },  // 0041 'A'
  { 0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00 },  // 0042 'B'
  { 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00 },  // 0043 'C'
  { 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00 },  // 0044 'D'
  { 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00 },  // 0045 'E'
  { 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00 },  // 0046 'F'
  { 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00 },  // 0047 'G'
  { 0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00 },  // 0048 'H'
  { 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 },  // 0049 'I'
  { 0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00 },  // 004a 'J'
  { 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00 },  // 004b 'K'
  { 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00 },  // 004c 'L'
  { 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00 },  // 004d 'M'
  { 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00 },  // 004e 'N'
  { 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00 },  // 004f 'O'
  { 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00 },  // 0050 'P'
  { 0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00 },  // 0051 'Q'
  { 0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00 },  // 0052 'R'
  { 0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00 },  // 0053 'S'
  { 0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 },  // 0054 'T'
  { 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00 },  // 0055 'U'
  { 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00 },  // 0056 'V'
  { 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00 },  // 0057 'W'
  { 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00 },  // 0058 'X'
  { 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00 },  // 0059 'Y'
  { 0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00 },  // 005a 'Z'
  { 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00 },  // 005b '['
  { 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00 },  // 005c '\'
  { 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00 },  // 005d ']'
  { 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00 },  // 005e '^'
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },  // 005f '_'
  { 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 0060 '`'
  { 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00 },  // 0061 'a'
  { 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00 },  // 0062 'b'
  { 0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00 },  // 0063 'c'
  { 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00 },  // 0064 'd'
  { 0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00 },  // 0065 'e'
  { 0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00 },  // 0066 'f'
  { 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8 },  // 0067 'g'
  { 0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00 },  // 0068 'h'
  { 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00 },  // 0069 'i'
  { 0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78 },  // 006a 'j'
  { 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00 },  // 006b 'k'
  { 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 },  // 006c 'l'
  { 0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00 },  // 006d 'm'
  { 0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00 },  // 006e 'n'
  { 0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00 },  // 006f 'o'
  { 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0 },  // 0070 'p'
  { 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e },  // 0071 'q'
  { 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00 },  // 0072 'r'
  { 0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00 },  // 0073 's'
  { 0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00 },  // 0074 't'
  { 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00 },  // 0075 'u'
  { 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00 },  // 0076 'v'
  { 0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00 },  // 0077 'w'
  { 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00 },  // 0078 'x'
  { 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8 },  // 0079 'y'
  { 0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00 },  // 007a 'z'
  { 0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00 },  // 007b '{'
  { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 },  // 007c '|'
  { 0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00 },  // 007d '}'
  { 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 007e '~'
  { 0x60, 0x90, 0x90, 0x66, 0x09, 0x08, 0x09, 0x06 }   // 007f
};

struct pos {
  int x;
  int y;
};

struct pos spiral(int size, struct pos in) {
  struct pos out = { size / 2, size / 2 - 1 };
  struct pos iter = { 0, 0 };

  int inc_y = 1;
  int inc = 1;
  int inc_l = 1;
  int inc_curl = 1;

  while (iter.x != in.x || iter.y != in.y) {
    if (inc_y) {
      out.y += inc;
      inc_curl--;

      if (inc_curl == 0) {
        inc_y = 0;
        inc_curl = inc_l;
        inc = -inc;
      }
    } else {
      out.x += inc;
      inc_curl--;

      if (inc_curl == 0) {
        inc_y = 1;
        inc_l++;
        inc_curl = inc_l;
      }
    }

    iter.x++;
    if (iter.x == size) {
      iter.x = 0;
      iter.y++;
    }
  }

  return out;
}

void testSpiral() {
  int y, x;
  int size = 4;

  for (int y = 0; y < size; y++)
    for (int x = 0; x < size; x++) {

      struct pos in = { x, y };
      struct pos out = spiral(size, in);

      Serial.print("in: ");
      Serial.print(in.x);
      Serial.print(", ");
      Serial.print(in.y);
      Serial.print(" => ");
      Serial.print(out.x);
      Serial.print(", ");
      Serial.println(out.y);
    }
}

void showCharN(int size, int n, byte *ch) {
  int x, y;

  for (y = 0; y < size; y++) {
    for (x = 0; x < size; x++) {
      byte mask = 1 << (size - 1 - x);

      lc.setLed(n, y, x, ch[y] & mask);
    }
  }
}

void showChar(int size, byte *ch) {
  showCharN(size, 0, ch);
}

void fastShowCharN(int size, int n, byte *ch) {
  int r;

  for (r = 0; r < size; r++) {
    byte noise = 0;

    if (ADD_NOISE) {
      noise = (random(ADD_NOISE) & random(ADD_NOISE) & random(ADD_NOISE) & random(ADD_NOISE)) & 0xFF;
    }

    byte c = ch[r] ^ noise;

    if (BOUNDS) {
      if (r == 0 || r == 7)
        c = c | 0x81;
    }

    lc.setRow(n, r, c);
  }
}

void fastShowChar(int size, byte *ch) {
  fastShowCharN(size, 0, ch);
}

void setBit(int n, int y, int x, int b) {
  lc.setLed(n, y, x, 1);
  delay(delaytime / 50);
  lc.setLed(n, y, x, b);
}

void showCharSpiralN(int size, int n, byte *ch) {
  for (int y = 0; y < size; y++) {

    for (int x = 0; x < size; x++) {

      struct pos in = { x, y };

      struct pos out = spiral(size, in);

      byte mask = 1 << (size - 1 - out.x);

      setBit(n, out.y, out.x, ch[out.y] & mask);
    }
  }
}

void showCharSpiral(int size, byte *ch) {
  showCharSpiralN(size, 0, ch);
}

void showCharWipeN(int size, int n, int y, int x, unsigned char *ch, int vert, int dir) {
  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size; j++) {

      unsigned char mask;
      unsigned char bit;

      if (vert) {
        if (dir) {
          mask = 1 << (size - 1 - i);
          bit = ch[j] & mask;
          setBit(n, j, i, bit);
        } else {
          mask = 1 << (i);
          bit = ch[j] & mask;
          setBit(n, j, size - 1 - i, bit);
        }
      } else {
        if (dir) {
          mask = 1 << (size - 1 - j);
          bit = ch[i] & mask;
          setBit(n, i, j, bit);
        } else {
          mask = 1 << (j);
          bit = ch[size - 1 - i] & mask;
          setBit(n, size - 1 - i, size - 1 - j, bit);
        }
      }
    }
  }
}

void showCharWipe(int size, int n, int y, int x, unsigned char *ch, int vert, int dir) {
  showCharWipeN(size, 0, y, x, ch, vert, dir);
}

void writeArduinoOnMatrix() {
  int i, j, b;

  // lc.setIntensity(0,12);

  for (i = 32; i < 128; i++) {
    for (int n = 0; n < DEVICES; n++) {
      showCharSpiralN(SIZE, n, font[i]);
    }
    delay(delaytime * 10);

    for (int n = 0; n < DEVICES; n++) {
      showCharN(SIZE, n, font[0]);
    }
    delay(delaytime);

    for (int n = 0; n < DEVICES; n++) {
      showCharWipeN(SIZE, n, 1, 7, font[i], i % 4 / 2, (i % 4) % 2);
    }
    delay(delaytime * 10);
  }
}

#ifdef __DUE__
long fire = 0;

void fireNow() {
  fire = 1;
}

int setupTimer(long t) {
  Timer3.attachInterrupt(fireNow).start(t);

  return 1;
}
#else
long fire = 1;

int setupTimer(long t) {
  return 0;
}
#endif

void bigCounter() {

  unsigned char big[SIZE];

  int i;

  for (i = 0; i < SIZE; i++) {
    big[i] = 0;
  }

  int haveTimer = setupTimer(1000000 / 25);

  // lc.setIntensity(0,15);

  long n = 0;

  while (1) {
    int i = 0;
    while (i < SIZE && (++big[i++] == 0))
      ;

    n++;

    if (fire) {
      for (int n = 0; n < DEVICES; n++) {
        fastShowCharN(SIZE, n, big);
      }

      if (haveTimer)
        fire = 0;
    }

    if (!haveTimer)
      delay(delaytime);
  }
}

void showScroll(int size, int pos, int n, byte *ch1, byte *ch2) {
  byte newChar[size];

  for (int i = 0; i < size; i++) {
    newChar[i] = ((ch1[i] << pos) | (ch2[i] >> (size - pos)));
  }

  fastShowCharN(SIZE, n, newChar);
}

void showScrollAnimation(int size, int frames, int pos, byte *ch1[], byte *ch2[]) {
  byte newChar[size];

  int frame = pos % frames;

  for (int i = 0; i < size; i++) {
    newChar[i] = ((ch1[frame][i] << pos) | (ch2[frame][i] >> (size - pos)));
  }

  fastShowChar(SIZE, newChar);
}

void scrollAnimation() {
  byte *ch1[] = { font[0x10], font[0x11], font[0x12], font[0x13], font[0x14], font[0x15], font[0x16] };
  byte *ch2[] = { font[0x10], font[0x11], font[0x12], font[0x13], font[0x14], font[0x15], font[0x16] };

  for (int p = 0; p < SIZE; p++) {
    showScrollAnimation(SIZE, 7, p, ch1, ch2);

    // showScroll( SIZE, p, 0, ch1[0], ch2[0] );

    delay(60);
  }
}

void scrollString(int size, int width, const char *string) {
  int len = strlen(string);
  int pos = 0;
  int lastPos = len - width;

  if (lastPos < 0) {
    lastPos = pos;
  }

  if (len > width) {
    int i = 0;
    do {
      for (int p = 0; p < size; p++) {
        for (int j = 0; j < width; j++) {
          showScroll(size, p, width - j - 1, font[string[i + j]], font[string[i + j + 1]]);
        }
        delay(delaytime);
      }

      i++;
    } while (i < lastPos);
  }

  // Final position
  for (int j = 0; j < width; j++) {
    showScroll(size, 0, width - j - 1, font[string[len - (width - j)]], font[string[len - (width - j)]]);
  }
  delay(delaytime);
}

void animateString(const char *string, int delayTime) {
  int len = strlen(string);

  for (int i = 0; i < len; i++) {
    for (int n = 0; n < DEVICES; n++) {
      fastShowCharN(SIZE, n, font[string[i]]);
    }
    delay(delayTime);
  }
}

int limit(int v, int min, int max) {
  if (v < min)
    return min;
  if (v > max)
    return max;
  return v;
}

void setDisplay(int intensity) {
  for (int d = 0; d <= DEVICES; d++) {
    lc.setIntensity(d, intensity);
  }
}

void fadeDisplay(int times, int start, int fin, int del) {
  int s = limit(start, 0, 15);
  int e = limit(fin, 0, 15);

  if (times % 2 == 1)
    times++;

  for (int t = 0; t < times; t++) {
    int inc = 1;

    if (s > e)
      inc = -1;

    for (int b = s; b != e; b = b + inc) {
      for (int d = 0; d <= DEVICES; d++) {
        lc.setIntensity(d, b);
      }
      delay(del);
    }

    int tmp = s;
    s = e;
    e = tmp;
  }
}

void nowServing() {
  int now = 100;

  int intensity = 12;

  do {
    char msg[60];

    sprintf(msg, "    ... Now serving>%3d", now);

    setDisplay(intensity);

    scrollString(SIZE, DEVICES, msg);

    int del = random(3) * 3 + 1;

    int inc = 1;

    if (random(10) <= 3) {
      inc += (random(3) + 1);
    }

    fadeDisplay(del * inc, intensity, 1, 80);

    now += inc;

    if (now > 999) {
      now = 42;
    }

  } while (true);
}

void phpIs() {
  const char *whats[] = {
    "Shit",
    "ACE!",
    "Okay",
    "Duff"
  };

  int delayTime = 2000;

  int numWhats = sizeof(whats) / sizeof(*whats);

  char msg[64];

  sprintf(msg, "PHP is ...");
  scrollString(SIZE, DEVICES, msg);
  delay(delayTime);

  int what = random(numWhats);
  scrollString(SIZE, DEVICES, whats[what]);
  delay(delayTime);
}

void tempAndHumidity() {
  const int oneSec = 1000;
  const int preReadDelay = 2 * oneSec;

  delay(preReadDelay);

  dht.read();

  float temp = dht.readTemperature();
  float humidity = dht.readHumidity();

  char msg[64];

  if (isnan(temp) || isnan(humidity)) {
    sprintf(msg, "Bad read!");
    scrollString(SIZE, DEVICES, msg);
  } else {
    sprintf(msg, "t=%2.0f\x7f", temp);
    scrollString(SIZE, DEVICES, msg);
    delay(oneSec);
    sprintf(msg, "h=%2.0f%%", humidity);
    scrollString(SIZE, DEVICES, msg);
  }
  delay(oneSec);
}

void animationTest() {
  for (int i = 1; i < 20; i++) {
    char buf[20];

    sprintf(buf, " d=%dms ", i);
    scrollString(SIZE, DEVICES, buf);

    const char *msg = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0d\x0e\x0f";
    int len = strlen(msg);
    const char *msg2 = "\x10\x11\x12\x13\x14\x15\x16\x17";

    int d = i * 10;
    int j = 1000 / (d * len);

    do {
      animateString(msg, d);

      animateString(msg2, d);

      j--;
    } while (j >= 0);
  }
}

void scrollAnimationLoop(int n) {
  for (int l = 0; l <= n; l++) {
    scrollAnimation();
  }
}

#define SET_CELL(b, x, y) b[y] = b[y] | (1 << (SIZE - x - 1))
#define CLR_CELL(b, x, y) b[y] = b[y] & (~(1 << (SIZE - x - 1)) & 0xFF)
#define CELL_ISSET(b, x, y) ((b[y] & (1 << (SIZE - x - 1))) != 0)

int lifeBoardEmpty(byte b[8]) {
  for (int i = 0; i < SIZE; i++) {
    if (b[i])
      return 0;
  }

  return 1;
}

int lifeBoardCopy(byte from[8], byte to[8]) {
  for (int i = 0; i < SIZE; i++) {
    to[i] = from[i];
  }
}

int lifeBoardsSame(byte b1[8], byte b2[8]) {

  for (int i = 0; i < SIZE; i++) {
    if (b1[i] != b2[i])
      return 0;
  }

  return 1;
}

int lifeNeighbours(byte b[8], int x, int y) {
  int res = 0;

  for (int r = y - 1; r < y + 2; r++) {
    for (int c = x - 1; c < x + 2; c++) {
      if ((r >= 0 && r < SIZE) && (c >= 0 && c < SIZE)) {
        if (CELL_ISSET(b, c, r)) {
          res++;
        }
      }
    }
  }

  if (CELL_ISSET(b, x, y)) {
    res--;
  }

  return res;
}

void gameOfLife() {
  byte b[8] = { 0, 0, 0x70, 0, 0, 0x07, 0, 0 };
  byte oldB[8];

  for (int i = 0; i < SIZE; i++) {
    // SET_CELL( b, i, i );

    b[i] = random(256);
  }

  fastShowChar(SIZE, b);

  delay(1000);

  int iterations = 100;
  int done = 0;

  while (!done && !lifeBoardEmpty(b) && iterations) {
    lifeBoardCopy(b, oldB);

    for (int y = 0; y < SIZE; y++) {
      for (int x = 0; x < SIZE; x++) {
        int nbs = lifeNeighbours(oldB, x, y);
        int live = CELL_ISSET(oldB, x, y);

        if (live) {
          if ((nbs < 2) || (nbs > 3)) {
            CLR_CELL(b, x, y);
          }
        } else {
          if (nbs == 3) {
            SET_CELL(b, x, y);
          }
        }
      }
    }

    fastShowChar(SIZE, b);

    delay(60);

    done = lifeBoardsSame(b, oldB);

    iterations--;
  }

  delay(1000);

  int setCount = 0;

  for (int y = 0; y < SIZE; y++) {
    for (int x = 0; x < SIZE; x++) {
      if (CELL_ISSET(b, x, y)) {
        setCount++;
      }
    }
  }

  char msg[65];
  sprintf(msg, "#=%d i=%d", setCount, 100 - iterations);
  scrollString(SIZE, DEVICES, msg);

  delay(1000);
}

void checkPir() {
  int delayTime = 20;
  int pirRead;

  pirRead = digitalRead(PIR_DATA);

  if (pirRead == HIGH) {
    digitalWrite(PIR_SHOW_LED, HIGH);
  } else {
    digitalWrite(PIR_SHOW_LED, LOW);
  }

  if (pirRead == HIGH) {
    scrollString(SIZE, DEVICES, "...!!! STOP !!!...");
  } else {
    animateString("|/-\\", 200);
  }

  delay(delayTime);
}

// FUNCTION: Sine, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int sineData[] = {
  0x800, 0x80c, 0x819, 0x825, 0x832, 0x83e, 0x84b, 0x858, 
  0x864, 0x871, 0x87d, 0x88a, 0x896, 0x8a3, 0x8af, 0x8bc, 
  0x8c8, 0x8d5, 0x8e1, 0x8ee, 0x8fa, 0x907, 0x913, 0x920, 
  0x92c, 0x939, 0x945, 0x951, 0x95e, 0x96a, 0x977, 0x983, 
  0x98f, 0x99c, 0x9a8, 0x9b4, 0x9c1, 0x9cd, 0x9d9, 0x9e5, 
  0x9f1, 0x9fe, 0xa0a, 0xa16, 0xa22, 0xa2e, 0xa3a, 0xa46, 
  0xa52, 0xa5e, 0xa6a, 0xa76, 0xa82, 0xa8e, 0xa9a, 0xaa6, 
  0xab2, 0xabe, 0xaca, 0xad5, 0xae1, 0xaed, 0xaf8, 0xb04, 
  0xb10, 0xb1b, 0xb27, 0xb32, 0xb3e, 0xb49, 0xb55, 0xb60, 
  0xb6c, 0xb77, 0xb82, 0xb8e, 0xb99, 0xba4, 0xbaf, 0xbba, 
  0xbc6, 0xbd1, 0xbdc, 0xbe7, 0xbf2, 0xbfd, 0xc07, 0xc12, 
  0xc1d, 0xc28, 0xc33, 0xc3d, 0xc48, 0xc52, 0xc5d, 0xc68, 
  0xc72, 0xc7c, 0xc87, 0xc91, 0xc9b, 0xca6, 0xcb0, 0xcba, 
  0xcc4, 0xcce, 0xcd8, 0xce2, 0xcec, 0xcf6, 0xd00, 0xd0a, 
  0xd13, 0xd1d, 0xd27, 0xd30, 0xd3a, 0xd43, 0xd4d, 0xd56, 
  0xd60, 0xd69, 0xd72, 0xd7b, 0xd84, 0xd8e, 0xd97, 0xd9f, 
  0xda8, 0xdb1, 0xdba, 0xdc3, 0xdcc, 0xdd4, 0xddd, 0xde5, 
  0xdee, 0xdf6, 0xdfe, 0xe07, 0xe0f, 0xe17, 0xe1f, 0xe27, 
  0xe2f, 0xe37, 0xe3f, 0xe47, 0xe4f, 0xe56, 0xe5e, 0xe66, 
  0xe6d, 0xe75, 0xe7c, 0xe83, 0xe8b, 0xe92, 0xe99, 0xea0, 
  0xea7, 0xeae, 0xeb5, 0xebc, 0xec2, 0xec9, 0xed0, 0xed6, 
  0xedd, 0xee3, 0xeea, 0xef0, 0xef6, 0xefc, 0xf02, 0xf08, 
  0xf0e, 0xf14, 0xf1a, 0xf20, 0xf25, 0xf2b, 0xf31, 0xf36, 
  0xf3b, 0xf41, 0xf46, 0xf4b, 0xf50, 0xf55, 0xf5a, 0xf5f, 
  0xf64, 0xf69, 0xf6d, 0xf72, 0xf77, 0xf7b, 0xf80, 0xf84, 
  0xf88, 0xf8c, 0xf90, 0xf94, 0xf98, 0xf9c, 0xfa0, 0xfa4, 
  0xfa8, 0xfab, 0xfaf, 0xfb2, 0xfb6, 0xfb9, 0xfbc, 0xfbf, 
  0xfc2, 0xfc5, 0xfc8, 0xfcb, 0xfce, 0xfd1, 0xfd3, 0xfd6, 
  0xfd8, 0xfdb, 0xfdd, 0xfdf, 0xfe1, 0xfe3, 0xfe5, 0xfe7, 
  0xfe9, 0xfeb, 0xfed, 0xfee, 0xff0, 0xff1, 0xff3, 0xff4, 
  0xff5, 0xff7, 0xff8, 0xff9, 0xffa, 0xffb, 0xffb, 0xffc, 
  0xffd, 0xffd, 0xffe, 0xffe, 0xffe, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xffe, 0xffe, 0xffd, 0xffd, 
  0xffc, 0xffc, 0xffb, 0xffa, 0xff9, 0xff8, 0xff7, 0xff6, 
  0xff5, 0xff4, 0xff2, 0xff1, 0xfef, 0xfee, 0xfec, 0xfea, 
  0xfe8, 0xfe6, 0xfe4, 0xfe2, 0xfe0, 0xfde, 0xfdc, 0xfd9, 
  0xfd7, 0xfd4, 0xfd2, 0xfcf, 0xfcc, 0xfca, 0xfc7, 0xfc4, 
  0xfc1, 0xfbe, 0xfba, 0xfb7, 0xfb4, 0xfb0, 0xfad, 0xfa9, 
  0xfa6, 0xfa2, 0xf9e, 0xf9a, 0xf96, 0xf92, 0xf8e, 0xf8a, 
  0xf86, 0xf82, 0xf7d, 0xf79, 0xf74, 0xf70, 0xf6b, 0xf66, 
  0xf62, 0xf5d, 0xf58, 0xf53, 0xf4e, 0xf49, 0xf43, 0xf3e, 
  0xf39, 0xf33, 0xf2e, 0xf28, 0xf23, 0xf1d, 0xf17, 0xf11, 
  0xf0b, 0xf05, 0xeff, 0xef9, 0xef3, 0xeed, 0xee6, 0xee0, 
  0xeda, 0xed3, 0xecc, 0xec6, 0xebf, 0xeb8, 0xeb1, 0xeab, 
  0xea4, 0xe9c, 0xe95, 0xe8e, 0xe87, 0xe80, 0xe78, 0xe71, 
  0xe69, 0xe62, 0xe5a, 0xe53, 0xe4b, 0xe43, 0xe3b, 0xe33, 
  0xe2b, 0xe23, 0xe1b, 0xe13, 0xe0b, 0xe03, 0xdfa, 0xdf2, 
  0xde9, 0xde1, 0xdd8, 0xdd0, 0xdc7, 0xdbe, 0xdb6, 0xdad, 
  0xda4, 0xd9b, 0xd92, 0xd89, 0xd80, 0xd77, 0xd6e, 0xd64, 
  0xd5b, 0xd52, 0xd48, 0xd3f, 0xd35, 0xd2c, 0xd22, 0xd18, 
  0xd0f, 0xd05, 0xcfb, 0xcf1, 0xce7, 0xcdd, 0xcd3, 0xcc9, 
  0xcbf, 0xcb5, 0xcab, 0xca1, 0xc96, 0xc8c, 0xc82, 0xc77, 
  0xc6d, 0xc62, 0xc58, 0xc4d, 0xc43, 0xc38, 0xc2d, 0xc22, 
  0xc18, 0xc0d, 0xc02, 0xbf7, 0xbec, 0xbe1, 0xbd6, 0xbcb, 
  0xbc0, 0xbb5, 0xbaa, 0xb9f, 0xb93, 0xb88, 0xb7d, 0xb71, 
  0xb66, 0xb5b, 0xb4f, 0xb44, 0xb38, 0xb2d, 0xb21, 0xb16, 
  0xb0a, 0xafe, 0xaf3, 0xae7, 0xadb, 0xacf, 0xac4, 0xab8, 
  0xaac, 0xaa0, 0xa94, 0xa88, 0xa7c, 0xa70, 0xa64, 0xa58, 
  0xa4c, 0xa40, 0xa34, 0xa28, 0xa1c, 0xa10, 0xa04, 0x9f8, 
  0x9eb, 0x9df, 0x9d3, 0x9c7, 0x9ba, 0x9ae, 0x9a2, 0x995, 
  0x989, 0x97d, 0x970, 0x964, 0x958, 0x94b, 0x93f, 0x932, 
  0x926, 0x91a, 0x90d, 0x901, 0x8f4, 0x8e8, 0x8db, 0x8cf, 
  0x8c2, 0x8b6, 0x8a9, 0x89d, 0x890, 0x883, 0x877, 0x86a, 
  0x85e, 0x851, 0x845, 0x838, 0x82c, 0x81f, 0x812, 0x806, 
  0x7f9, 0x7ed, 0x7e0, 0x7d3, 0x7c7, 0x7ba, 0x7ae, 0x7a1, 
  0x795, 0x788, 0x77c, 0x76f, 0x762, 0x756, 0x749, 0x73d, 
  0x730, 0x724, 0x717, 0x70b, 0x6fe, 0x6f2, 0x6e5, 0x6d9, 
  0x6cd, 0x6c0, 0x6b4, 0x6a7, 0x69b, 0x68f, 0x682, 0x676, 
  0x66a, 0x65d, 0x651, 0x645, 0x638, 0x62c, 0x620, 0x614, 
  0x607, 0x5fb, 0x5ef, 0x5e3, 0x5d7, 0x5cb, 0x5bf, 0x5b3, 
  0x5a7, 0x59b, 0x58f, 0x583, 0x577, 0x56b, 0x55f, 0x553, 
  0x547, 0x53b, 0x530, 0x524, 0x518, 0x50c, 0x501, 0x4f5, 
  0x4e9, 0x4de, 0x4d2, 0x4c7, 0x4bb, 0x4b0, 0x4a4, 0x499, 
  0x48e, 0x482, 0x477, 0x46c, 0x460, 0x455, 0x44a, 0x43f, 
  0x434, 0x429, 0x41e, 0x413, 0x408, 0x3fd, 0x3f2, 0x3e7, 
  0x3dd, 0x3d2, 0x3c7, 0x3bc, 0x3b2, 0x3a7, 0x39d, 0x392, 
  0x388, 0x37d, 0x373, 0x369, 0x35e, 0x354, 0x34a, 0x340, 
  0x336, 0x32c, 0x322, 0x318, 0x30e, 0x304, 0x2fa, 0x2f0, 
  0x2e7, 0x2dd, 0x2d3, 0x2ca, 0x2c0, 0x2b7, 0x2ad, 0x2a4, 
  0x29b, 0x291, 0x288, 0x27f, 0x276, 0x26d, 0x264, 0x25b, 
  0x252, 0x249, 0x241, 0x238, 0x22f, 0x227, 0x21e, 0x216, 
  0x20d, 0x205, 0x1fc, 0x1f4, 0x1ec, 0x1e4, 0x1dc, 0x1d4, 
  0x1cc, 0x1c4, 0x1bc, 0x1b4, 0x1ac, 0x1a5, 0x19d, 0x196, 
  0x18e, 0x187, 0x17f, 0x178, 0x171, 0x16a, 0x163, 0x15b, 
  0x154, 0x14e, 0x147, 0x140, 0x139, 0x133, 0x12c, 0x125, 
  0x11f, 0x119, 0x112, 0x10c, 0x106, 0x100, 0x0fa, 0x0f4, 
  0x0ee, 0x0e8, 0x0e2, 0x0dc, 0x0d7, 0x0d1, 0x0cc, 0x0c6, 
  0x0c1, 0x0bc, 0x0b6, 0x0b1, 0x0ac, 0x0a7, 0x0a2, 0x09d, 
  0x099, 0x094, 0x08f, 0x08b, 0x086, 0x082, 0x07d, 0x079, 
  0x075, 0x071, 0x06d, 0x069, 0x065, 0x061, 0x05d, 0x059, 
  0x056, 0x052, 0x04f, 0x04b, 0x048, 0x045, 0x041, 0x03e, 
  0x03b, 0x038, 0x035, 0x033, 0x030, 0x02d, 0x02b, 0x028, 
  0x026, 0x023, 0x021, 0x01f, 0x01d, 0x01b, 0x019, 0x017, 
  0x015, 0x013, 0x011, 0x010, 0x00e, 0x00d, 0x00b, 0x00a, 
  0x009, 0x008, 0x007, 0x006, 0x005, 0x004, 0x003, 0x003, 
  0x002, 0x002, 0x001, 0x001, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x001, 0x001, 0x001, 0x002, 0x002, 
  0x003, 0x004, 0x004, 0x005, 0x006, 0x007, 0x008, 0x00a, 
  0x00b, 0x00c, 0x00e, 0x00f, 0x011, 0x012, 0x014, 0x016, 
  0x018, 0x01a, 0x01c, 0x01e, 0x020, 0x022, 0x024, 0x027, 
  0x029, 0x02c, 0x02e, 0x031, 0x034, 0x037, 0x03a, 0x03d, 
  0x040, 0x043, 0x046, 0x049, 0x04d, 0x050, 0x054, 0x057, 
  0x05b, 0x05f, 0x063, 0x067, 0x06b, 0x06f, 0x073, 0x077, 
  0x07b, 0x07f, 0x084, 0x088, 0x08d, 0x092, 0x096, 0x09b, 
  0x0a0, 0x0a5, 0x0aa, 0x0af, 0x0b4, 0x0b9, 0x0be, 0x0c4, 
  0x0c9, 0x0ce, 0x0d4, 0x0da, 0x0df, 0x0e5, 0x0eb, 0x0f1, 
  0x0f7, 0x0fd, 0x103, 0x109, 0x10f, 0x115, 0x11c, 0x122, 
  0x129, 0x12f, 0x136, 0x13d, 0x143, 0x14a, 0x151, 0x158, 
  0x15f, 0x166, 0x16d, 0x174, 0x17c, 0x183, 0x18a, 0x192, 
  0x199, 0x1a1, 0x1a9, 0x1b0, 0x1b8, 0x1c0, 0x1c8, 0x1d0, 
  0x1d8, 0x1e0, 0x1e8, 0x1f0, 0x1f8, 0x201, 0x209, 0x211, 
  0x21a, 0x222, 0x22b, 0x233, 0x23c, 0x245, 0x24e, 0x257, 
  0x260, 0x268, 0x271, 0x27b, 0x284, 0x28d, 0x296, 0x29f, 
  0x2a9, 0x2b2, 0x2bc, 0x2c5, 0x2cf, 0x2d8, 0x2e2, 0x2ec, 
  0x2f5, 0x2ff, 0x309, 0x313, 0x31d, 0x327, 0x331, 0x33b, 
  0x345, 0x34f, 0x359, 0x364, 0x36e, 0x378, 0x383, 0x38d, 
  0x397, 0x3a2, 0x3ad, 0x3b7, 0x3c2, 0x3cc, 0x3d7, 0x3e2, 
  0x3ed, 0x3f8, 0x402, 0x40d, 0x418, 0x423, 0x42e, 0x439, 
  0x445, 0x450, 0x45b, 0x466, 0x471, 0x47d, 0x488, 0x493, 
  0x49f, 0x4aa, 0x4b6, 0x4c1, 0x4cd, 0x4d8, 0x4e4, 0x4ef, 
  0x4fb, 0x507, 0x512, 0x51e, 0x52a, 0x535, 0x541, 0x54d, 
  0x559, 0x565, 0x571, 0x57d, 0x589, 0x595, 0x5a1, 0x5ad, 
  0x5b9, 0x5c5, 0x5d1, 0x5dd, 0x5e9, 0x5f5, 0x601, 0x60e, 
  0x61a, 0x626, 0x632, 0x63e, 0x64b, 0x657, 0x663, 0x670, 
  0x67c, 0x688, 0x695, 0x6a1, 0x6ae, 0x6ba, 0x6c6, 0x6d3, 
  0x6df, 0x6ec, 0x6f8, 0x705, 0x711, 0x71e, 0x72a, 0x737, 
  0x743, 0x750, 0x75c, 0x769, 0x775, 0x782, 0x78e, 0x79b, 
  0x7a7, 0x7b4, 0x7c1, 0x7cd, 0x7da, 0x7e6, 0x7f3, 0x800
};

// FUNCTION: Triangle, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int triangleData[] = {
  0x000, 0x008, 0x010, 0x018, 0x020, 0x028, 0x030, 0x038, 
  0x040, 0x048, 0x050, 0x058, 0x060, 0x068, 0x070, 0x078, 
  0x080, 0x088, 0x090, 0x098, 0x0a0, 0x0a8, 0x0b0, 0x0b8, 
  0x0c0, 0x0c8, 0x0d0, 0x0d8, 0x0e0, 0x0e8, 0x0f0, 0x0f8, 
  0x100, 0x108, 0x110, 0x118, 0x120, 0x128, 0x130, 0x138, 
  0x140, 0x148, 0x150, 0x158, 0x160, 0x168, 0x170, 0x178, 
  0x180, 0x188, 0x190, 0x198, 0x1a0, 0x1a8, 0x1b0, 0x1b8, 
  0x1c0, 0x1c8, 0x1d0, 0x1d8, 0x1e0, 0x1e8, 0x1f0, 0x1f8, 
  0x200, 0x208, 0x210, 0x218, 0x220, 0x228, 0x230, 0x238, 
  0x240, 0x248, 0x250, 0x258, 0x260, 0x268, 0x270, 0x278, 
  0x280, 0x288, 0x290, 0x298, 0x2a0, 0x2a8, 0x2b1, 0x2b9, 
  0x2c1, 0x2c9, 0x2d1, 0x2d9, 0x2e1, 0x2e9, 0x2f1, 0x2f9, 
  0x301, 0x309, 0x311, 0x319, 0x321, 0x329, 0x331, 0x339, 
  0x341, 0x349, 0x351, 0x359, 0x361, 0x369, 0x371, 0x379, 
  0x381, 0x389, 0x391, 0x399, 0x3a1, 0x3a9, 0x3b1, 0x3b9, 
  0x3c1, 0x3c9, 0x3d1, 0x3d9, 0x3e1, 0x3e9, 0x3f1, 0x3f9, 
  0x401, 0x409, 0x411, 0x419, 0x421, 0x429, 0x431, 0x439, 
  0x441, 0x449, 0x451, 0x459, 0x461, 0x469, 0x471, 0x479, 
  0x481, 0x489, 0x491, 0x499, 0x4a1, 0x4a9, 0x4b1, 0x4b9, 
  0x4c1, 0x4c9, 0x4d1, 0x4d9, 0x4e1, 0x4e9, 0x4f1, 0x4f9, 
  0x501, 0x509, 0x511, 0x519, 0x521, 0x529, 0x531, 0x539, 
  0x541, 0x549, 0x551, 0x559, 0x561, 0x569, 0x571, 0x579, 
  0x581, 0x589, 0x591, 0x599, 0x5a1, 0x5a9, 0x5b1, 0x5b9, 
  0x5c1, 0x5c9, 0x5d1, 0x5d9, 0x5e1, 0x5e9, 0x5f1, 0x5f9, 
  0x601, 0x609, 0x611, 0x619, 0x621, 0x629, 0x631, 0x639, 
  0x641, 0x649, 0x651, 0x659, 0x661, 0x669, 0x671, 0x679, 
  0x681, 0x689, 0x691, 0x699, 0x6a1, 0x6a9, 0x6b1, 0x6b9, 
  0x6c1, 0x6c9, 0x6d1, 0x6d9, 0x6e1, 0x6e9, 0x6f1, 0x6f9, 
  0x701, 0x709, 0x711, 0x719, 0x721, 0x729, 0x731, 0x739, 
  0x741, 0x749, 0x751, 0x759, 0x761, 0x769, 0x771, 0x779, 
  0x781, 0x789, 0x791, 0x799, 0x7a1, 0x7a9, 0x7b1, 0x7b9, 
  0x7c1, 0x7c9, 0x7d1, 0x7d9, 0x7e1, 0x7e9, 0x7f1, 0x7f9, 
  0x802, 0x80a, 0x812, 0x81a, 0x822, 0x82a, 0x832, 0x83a, 
  0x842, 0x84a, 0x852, 0x85a, 0x862, 0x86a, 0x872, 0x87a, 
  0x882, 0x88a, 0x892, 0x89a, 0x8a2, 0x8aa, 0x8b2, 0x8ba, 
  0x8c2, 0x8ca, 0x8d2, 0x8da, 0x8e2, 0x8ea, 0x8f2, 0x8fa, 
  0x902, 0x90a, 0x912, 0x91a, 0x922, 0x92a, 0x932, 0x93a, 
  0x942, 0x94a, 0x952, 0x95a, 0x962, 0x96a, 0x972, 0x97a, 
  0x982, 0x98a, 0x992, 0x99a, 0x9a2, 0x9aa, 0x9b2, 0x9ba, 
  0x9c2, 0x9ca, 0x9d2, 0x9da, 0x9e2, 0x9ea, 0x9f2, 0x9fa, 
  0xa02, 0xa0a, 0xa12, 0xa1a, 0xa22, 0xa2a, 0xa32, 0xa3a, 
  0xa42, 0xa4a, 0xa52, 0xa5a, 0xa62, 0xa6a, 0xa72, 0xa7a, 
  0xa82, 0xa8a, 0xa92, 0xa9a, 0xaa2, 0xaaa, 0xab2, 0xaba, 
  0xac2, 0xaca, 0xad2, 0xada, 0xae2, 0xaea, 0xaf2, 0xafa, 
  0xb02, 0xb0a, 0xb12, 0xb1a, 0xb22, 0xb2a, 0xb32, 0xb3a, 
  0xb42, 0xb4a, 0xb52, 0xb5a, 0xb62, 0xb6a, 0xb72, 0xb7a, 
  0xb82, 0xb8a, 0xb92, 0xb9a, 0xba2, 0xbaa, 0xbb2, 0xbba, 
  0xbc2, 0xbca, 0xbd2, 0xbda, 0xbe2, 0xbea, 0xbf2, 0xbfa, 
  0xc02, 0xc0a, 0xc12, 0xc1a, 0xc22, 0xc2a, 0xc32, 0xc3a, 
  0xc42, 0xc4a, 0xc52, 0xc5a, 0xc62, 0xc6a, 0xc72, 0xc7a, 
  0xc82, 0xc8a, 0xc92, 0xc9a, 0xca2, 0xcaa, 0xcb2, 0xcba, 
  0xcc2, 0xcca, 0xcd2, 0xcda, 0xce2, 0xcea, 0xcf2, 0xcfa, 
  0xd02, 0xd0a, 0xd12, 0xd1a, 0xd22, 0xd2a, 0xd32, 0xd3a, 
  0xd42, 0xd4a, 0xd52, 0xd5b, 0xd63, 0xd6b, 0xd73, 0xd7b, 
  0xd83, 0xd8b, 0xd93, 0xd9b, 0xda3, 0xdab, 0xdb3, 0xdbb, 
  0xdc3, 0xdcb, 0xdd3, 0xddb, 0xde3, 0xdeb, 0xdf3, 0xdfb, 
  0xe03, 0xe0b, 0xe13, 0xe1b, 0xe23, 0xe2b, 0xe33, 0xe3b, 
  0xe43, 0xe4b, 0xe53, 0xe5b, 0xe63, 0xe6b, 0xe73, 0xe7b, 
  0xe83, 0xe8b, 0xe93, 0xe9b, 0xea3, 0xeab, 0xeb3, 0xebb, 
  0xec3, 0xecb, 0xed3, 0xedb, 0xee3, 0xeeb, 0xef3, 0xefb, 
  0xf03, 0xf0b, 0xf13, 0xf1b, 0xf23, 0xf2b, 0xf33, 0xf3b, 
  0xf43, 0xf4b, 0xf53, 0xf5b, 0xf63, 0xf6b, 0xf73, 0xf7b, 
  0xf83, 0xf8b, 0xf93, 0xf9b, 0xfa3, 0xfab, 0xfb3, 0xfbb, 
  0xfc3, 0xfcb, 0xfd3, 0xfdb, 0xfe3, 0xfeb, 0xff5, 0xfff,  // was ..., 0xff3, 0xffb
  0xffb, 0xff3, 0xfeb, 0xfe3, 0xfdb, 0xfd3, 0xfcb, 0xfc3, 
  0xfbb, 0xfb3, 0xfab, 0xfa3, 0xf9b, 0xf93, 0xf8b, 0xf83, 
  0xf7b, 0xf73, 0xf6b, 0xf63, 0xf5b, 0xf53, 0xf4b, 0xf43, 
  0xf3b, 0xf33, 0xf2b, 0xf23, 0xf1b, 0xf13, 0xf0b, 0xf03, 
  0xefb, 0xef3, 0xeeb, 0xee3, 0xedb, 0xed3, 0xecb, 0xec3, 
  0xebb, 0xeb3, 0xeab, 0xea3, 0xe9b, 0xe93, 0xe8b, 0xe83, 
  0xe7b, 0xe73, 0xe6b, 0xe63, 0xe5b, 0xe53, 0xe4b, 0xe43, 
  0xe3b, 0xe33, 0xe2b, 0xe23, 0xe1b, 0xe13, 0xe0b, 0xe03, 
  0xdfb, 0xdf3, 0xdeb, 0xde3, 0xddb, 0xdd3, 0xdcb, 0xdc3, 
  0xdbb, 0xdb3, 0xdab, 0xda3, 0xd9b, 0xd93, 0xd8b, 0xd83, 
  0xd7b, 0xd73, 0xd6b, 0xd63, 0xd5b, 0xd52, 0xd4a, 0xd42, 
  0xd3a, 0xd32, 0xd2a, 0xd22, 0xd1a, 0xd12, 0xd0a, 0xd02, 
  0xcfa, 0xcf2, 0xcea, 0xce2, 0xcda, 0xcd2, 0xcca, 0xcc2, 
  0xcba, 0xcb2, 0xcaa, 0xca2, 0xc9a, 0xc92, 0xc8a, 0xc82, 
  0xc7a, 0xc72, 0xc6a, 0xc62, 0xc5a, 0xc52, 0xc4a, 0xc42, 
  0xc3a, 0xc32, 0xc2a, 0xc22, 0xc1a, 0xc12, 0xc0a, 0xc02, 
  0xbfa, 0xbf2, 0xbea, 0xbe2, 0xbda, 0xbd2, 0xbca, 0xbc2, 
  0xbba, 0xbb2, 0xbaa, 0xba2, 0xb9a, 0xb92, 0xb8a, 0xb82, 
  0xb7a, 0xb72, 0xb6a, 0xb62, 0xb5a, 0xb52, 0xb4a, 0xb42, 
  0xb3a, 0xb32, 0xb2a, 0xb22, 0xb1a, 0xb12, 0xb0a, 0xb02, 
  0xafa, 0xaf2, 0xaea, 0xae2, 0xada, 0xad2, 0xaca, 0xac2, 
  0xaba, 0xab2, 0xaaa, 0xaa2, 0xa9a, 0xa92, 0xa8a, 0xa82, 
  0xa7a, 0xa72, 0xa6a, 0xa62, 0xa5a, 0xa52, 0xa4a, 0xa42, 
  0xa3a, 0xa32, 0xa2a, 0xa22, 0xa1a, 0xa12, 0xa0a, 0xa02, 
  0x9fa, 0x9f2, 0x9ea, 0x9e2, 0x9da, 0x9d2, 0x9ca, 0x9c2, 
  0x9ba, 0x9b2, 0x9aa, 0x9a2, 0x99a, 0x992, 0x98a, 0x982, 
  0x97a, 0x972, 0x96a, 0x962, 0x95a, 0x952, 0x94a, 0x942, 
  0x93a, 0x932, 0x92a, 0x922, 0x91a, 0x912, 0x90a, 0x902, 
  0x8fa, 0x8f2, 0x8ea, 0x8e2, 0x8da, 0x8d2, 0x8ca, 0x8c2, 
  0x8ba, 0x8b2, 0x8aa, 0x8a2, 0x89a, 0x892, 0x88a, 0x882, 
  0x87a, 0x872, 0x86a, 0x862, 0x85a, 0x852, 0x84a, 0x842, 
  0x83a, 0x832, 0x82a, 0x822, 0x81a, 0x812, 0x80a, 0x802, 
  0x7f9, 0x7f1, 0x7e9, 0x7e1, 0x7d9, 0x7d1, 0x7c9, 0x7c1, 
  0x7b9, 0x7b1, 0x7a9, 0x7a1, 0x799, 0x791, 0x789, 0x781, 
  0x779, 0x771, 0x769, 0x761, 0x759, 0x751, 0x749, 0x741, 
  0x739, 0x731, 0x729, 0x721, 0x719, 0x711, 0x709, 0x701, 
  0x6f9, 0x6f1, 0x6e9, 0x6e1, 0x6d9, 0x6d1, 0x6c9, 0x6c1, 
  0x6b9, 0x6b1, 0x6a9, 0x6a1, 0x699, 0x691, 0x689, 0x681, 
  0x679, 0x671, 0x669, 0x661, 0x659, 0x651, 0x649, 0x641, 
  0x639, 0x631, 0x629, 0x621, 0x619, 0x611, 0x609, 0x601, 
  0x5f9, 0x5f1, 0x5e9, 0x5e1, 0x5d9, 0x5d1, 0x5c9, 0x5c1, 
  0x5b9, 0x5b1, 0x5a9, 0x5a1, 0x599, 0x591, 0x589, 0x581, 
  0x579, 0x571, 0x569, 0x561, 0x559, 0x551, 0x549, 0x541, 
  0x539, 0x531, 0x529, 0x521, 0x519, 0x511, 0x509, 0x501, 
  0x4f9, 0x4f1, 0x4e9, 0x4e1, 0x4d9, 0x4d1, 0x4c9, 0x4c1, 
  0x4b9, 0x4b1, 0x4a9, 0x4a1, 0x499, 0x491, 0x489, 0x481, 
  0x479, 0x471, 0x469, 0x461, 0x459, 0x451, 0x449, 0x441, 
  0x439, 0x431, 0x429, 0x421, 0x419, 0x411, 0x409, 0x401, 
  0x3f9, 0x3f1, 0x3e9, 0x3e1, 0x3d9, 0x3d1, 0x3c9, 0x3c1, 
  0x3b9, 0x3b1, 0x3a9, 0x3a1, 0x399, 0x391, 0x389, 0x381, 
  0x379, 0x371, 0x369, 0x361, 0x359, 0x351, 0x349, 0x341, 
  0x339, 0x331, 0x329, 0x321, 0x319, 0x311, 0x309, 0x301, 
  0x2f9, 0x2f1, 0x2e9, 0x2e1, 0x2d9, 0x2d1, 0x2c9, 0x2c1, 
  0x2b9, 0x2b1, 0x2a8, 0x2a0, 0x298, 0x290, 0x288, 0x280, 
  0x278, 0x270, 0x268, 0x260, 0x258, 0x250, 0x248, 0x240, 
  0x238, 0x230, 0x228, 0x220, 0x218, 0x210, 0x208, 0x200, 
  0x1f8, 0x1f0, 0x1e8, 0x1e0, 0x1d8, 0x1d0, 0x1c8, 0x1c0, 
  0x1b8, 0x1b0, 0x1a8, 0x1a0, 0x198, 0x190, 0x188, 0x180, 
  0x178, 0x170, 0x168, 0x160, 0x158, 0x150, 0x148, 0x140, 
  0x138, 0x130, 0x128, 0x120, 0x118, 0x110, 0x108, 0x100, 
  0x0f8, 0x0f0, 0x0e8, 0x0e0, 0x0d8, 0x0d0, 0x0c8, 0x0c0, 
  0x0b8, 0x0b0, 0x0a8, 0x0a0, 0x098, 0x090, 0x088, 0x080, 
  0x078, 0x070, 0x068, 0x060, 0x058, 0x050, 0x048, 0x040, 
  0x038, 0x030, 0x028, 0x020, 0x018, 0x010, 0x008, 0x000
};


// FUNCTION: Impulse, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int impulseData[] = {
  0xfff, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000
};

// FUNCTION: Square, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int squareData[] = {
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000
};

// FUNCTION: Ramp, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int rampData[] = {
  0x000, 0x004, 0x008, 0x00c, 0x010, 0x014, 0x018, 0x01c, 
  0x020, 0x024, 0x028, 0x02c, 0x030, 0x034, 0x038, 0x03c, 
  0x040, 0x044, 0x048, 0x04c, 0x050, 0x054, 0x058, 0x05c, 
  0x060, 0x064, 0x068, 0x06c, 0x070, 0x074, 0x078, 0x07c, 
  0x080, 0x084, 0x088, 0x08c, 0x090, 0x094, 0x098, 0x09c, 
  0x0a0, 0x0a4, 0x0a8, 0x0ac, 0x0b0, 0x0b4, 0x0b8, 0x0bc, 
  0x0c0, 0x0c4, 0x0c8, 0x0cc, 0x0d0, 0x0d4, 0x0d8, 0x0dc, 
  0x0e0, 0x0e4, 0x0e8, 0x0ec, 0x0f0, 0x0f4, 0x0f8, 0x0fc, 
  0x100, 0x104, 0x108, 0x10c, 0x110, 0x114, 0x118, 0x11c, 
  0x120, 0x124, 0x128, 0x12c, 0x130, 0x134, 0x138, 0x13c, 
  0x140, 0x144, 0x148, 0x14c, 0x150, 0x154, 0x158, 0x15c, 
  0x160, 0x164, 0x168, 0x16c, 0x170, 0x174, 0x178, 0x17c, 
  0x180, 0x184, 0x188, 0x18c, 0x190, 0x194, 0x198, 0x19c, 
  0x1a0, 0x1a4, 0x1a8, 0x1ac, 0x1b0, 0x1b4, 0x1b8, 0x1bc, 
  0x1c0, 0x1c4, 0x1c8, 0x1cc, 0x1d0, 0x1d4, 0x1d8, 0x1dc, 
  0x1e0, 0x1e4, 0x1e8, 0x1ec, 0x1f0, 0x1f4, 0x1f8, 0x1fc, 
  0x200, 0x204, 0x208, 0x20c, 0x210, 0x214, 0x218, 0x21c, 
  0x220, 0x224, 0x228, 0x22c, 0x230, 0x234, 0x238, 0x23c, 
  0x240, 0x244, 0x248, 0x24c, 0x250, 0x254, 0x258, 0x25c, 
  0x260, 0x264, 0x268, 0x26c, 0x270, 0x274, 0x278, 0x27c, 
  0x280, 0x284, 0x288, 0x28c, 0x290, 0x294, 0x298, 0x29c, 
  0x2a0, 0x2a4, 0x2a8, 0x2ad, 0x2b1, 0x2b5, 0x2b9, 0x2bd, 
  0x2c1, 0x2c5, 0x2c9, 0x2cd, 0x2d1, 0x2d5, 0x2d9, 0x2dd, 
  0x2e1, 0x2e5, 0x2e9, 0x2ed, 0x2f1, 0x2f5, 0x2f9, 0x2fd, 
  0x301, 0x305, 0x309, 0x30d, 0x311, 0x315, 0x319, 0x31d, 
  0x321, 0x325, 0x329, 0x32d, 0x331, 0x335, 0x339, 0x33d, 
  0x341, 0x345, 0x349, 0x34d, 0x351, 0x355, 0x359, 0x35d, 
  0x361, 0x365, 0x369, 0x36d, 0x371, 0x375, 0x379, 0x37d, 
  0x381, 0x385, 0x389, 0x38d, 0x391, 0x395, 0x399, 0x39d, 
  0x3a1, 0x3a5, 0x3a9, 0x3ad, 0x3b1, 0x3b5, 0x3b9, 0x3bd, 
  0x3c1, 0x3c5, 0x3c9, 0x3cd, 0x3d1, 0x3d5, 0x3d9, 0x3dd, 
  0x3e1, 0x3e5, 0x3e9, 0x3ed, 0x3f1, 0x3f5, 0x3f9, 0x3fd, 
  0x401, 0x405, 0x409, 0x40d, 0x411, 0x415, 0x419, 0x41d, 
  0x421, 0x425, 0x429, 0x42d, 0x431, 0x435, 0x439, 0x43d, 
  0x441, 0x445, 0x449, 0x44d, 0x451, 0x455, 0x459, 0x45d, 
  0x461, 0x465, 0x469, 0x46d, 0x471, 0x475, 0x479, 0x47d, 
  0x481, 0x485, 0x489, 0x48d, 0x491, 0x495, 0x499, 0x49d, 
  0x4a1, 0x4a5, 0x4a9, 0x4ad, 0x4b1, 0x4b5, 0x4b9, 0x4bd, 
  0x4c1, 0x4c5, 0x4c9, 0x4cd, 0x4d1, 0x4d5, 0x4d9, 0x4dd, 
  0x4e1, 0x4e5, 0x4e9, 0x4ed, 0x4f1, 0x4f5, 0x4f9, 0x4fd, 
  0x501, 0x505, 0x509, 0x50d, 0x511, 0x515, 0x519, 0x51d, 
  0x521, 0x525, 0x529, 0x52d, 0x531, 0x535, 0x539, 0x53d, 
  0x541, 0x545, 0x549, 0x54d, 0x551, 0x555, 0x559, 0x55d, 
  0x561, 0x565, 0x569, 0x56d, 0x571, 0x575, 0x579, 0x57d, 
  0x581, 0x585, 0x589, 0x58d, 0x591, 0x595, 0x599, 0x59d, 
  0x5a1, 0x5a5, 0x5a9, 0x5ad, 0x5b1, 0x5b5, 0x5b9, 0x5bd, 
  0x5c1, 0x5c5, 0x5c9, 0x5cd, 0x5d1, 0x5d5, 0x5d9, 0x5dd, 
  0x5e1, 0x5e5, 0x5e9, 0x5ed, 0x5f1, 0x5f5, 0x5f9, 0x5fd, 
  0x601, 0x605, 0x609, 0x60d, 0x611, 0x615, 0x619, 0x61d, 
  0x621, 0x625, 0x629, 0x62d, 0x631, 0x635, 0x639, 0x63d, 
  0x641, 0x645, 0x649, 0x64d, 0x651, 0x655, 0x659, 0x65d, 
  0x661, 0x665, 0x669, 0x66d, 0x671, 0x675, 0x679, 0x67d, 
  0x681, 0x685, 0x689, 0x68d, 0x691, 0x695, 0x699, 0x69d, 
  0x6a1, 0x6a5, 0x6a9, 0x6ad, 0x6b1, 0x6b5, 0x6b9, 0x6bd, 
  0x6c1, 0x6c5, 0x6c9, 0x6cd, 0x6d1, 0x6d5, 0x6d9, 0x6dd, 
  0x6e1, 0x6e5, 0x6e9, 0x6ed, 0x6f1, 0x6f5, 0x6f9, 0x6fd, 
  0x701, 0x705, 0x709, 0x70d, 0x711, 0x715, 0x719, 0x71d, 
  0x721, 0x725, 0x729, 0x72d, 0x731, 0x735, 0x739, 0x73d, 
  0x741, 0x745, 0x749, 0x74d, 0x751, 0x755, 0x759, 0x75d, 
  0x761, 0x765, 0x769, 0x76d, 0x771, 0x775, 0x779, 0x77d, 
  0x781, 0x785, 0x789, 0x78d, 0x791, 0x795, 0x799, 0x79d, 
  0x7a1, 0x7a5, 0x7a9, 0x7ad, 0x7b1, 0x7b5, 0x7b9, 0x7bd, 
  0x7c1, 0x7c5, 0x7c9, 0x7cd, 0x7d1, 0x7d5, 0x7d9, 0x7dd, 
  0x7e1, 0x7e5, 0x7e9, 0x7ed, 0x7f1, 0x7f5, 0x7f9, 0x7fd, 
  0x802, 0x806, 0x80a, 0x80e, 0x812, 0x816, 0x81a, 0x81e, 
  0x822, 0x826, 0x82a, 0x82e, 0x832, 0x836, 0x83a, 0x83e, 
  0x842, 0x846, 0x84a, 0x84e, 0x852, 0x856, 0x85a, 0x85e, 
  0x862, 0x866, 0x86a, 0x86e, 0x872, 0x876, 0x87a, 0x87e, 
  0x882, 0x886, 0x88a, 0x88e, 0x892, 0x896, 0x89a, 0x89e, 
  0x8a2, 0x8a6, 0x8aa, 0x8ae, 0x8b2, 0x8b6, 0x8ba, 0x8be, 
  0x8c2, 0x8c6, 0x8ca, 0x8ce, 0x8d2, 0x8d6, 0x8da, 0x8de, 
  0x8e2, 0x8e6, 0x8ea, 0x8ee, 0x8f2, 0x8f6, 0x8fa, 0x8fe, 
  0x902, 0x906, 0x90a, 0x90e, 0x912, 0x916, 0x91a, 0x91e, 
  0x922, 0x926, 0x92a, 0x92e, 0x932, 0x936, 0x93a, 0x93e, 
  0x942, 0x946, 0x94a, 0x94e, 0x952, 0x956, 0x95a, 0x95e, 
  0x962, 0x966, 0x96a, 0x96e, 0x972, 0x976, 0x97a, 0x97e, 
  0x982, 0x986, 0x98a, 0x98e, 0x992, 0x996, 0x99a, 0x99e, 
  0x9a2, 0x9a6, 0x9aa, 0x9ae, 0x9b2, 0x9b6, 0x9ba, 0x9be, 
  0x9c2, 0x9c6, 0x9ca, 0x9ce, 0x9d2, 0x9d6, 0x9da, 0x9de, 
  0x9e2, 0x9e6, 0x9ea, 0x9ee, 0x9f2, 0x9f6, 0x9fa, 0x9fe, 
  0xa02, 0xa06, 0xa0a, 0xa0e, 0xa12, 0xa16, 0xa1a, 0xa1e, 
  0xa22, 0xa26, 0xa2a, 0xa2e, 0xa32, 0xa36, 0xa3a, 0xa3e, 
  0xa42, 0xa46, 0xa4a, 0xa4e, 0xa52, 0xa56, 0xa5a, 0xa5e, 
  0xa62, 0xa66, 0xa6a, 0xa6e, 0xa72, 0xa76, 0xa7a, 0xa7e, 
  0xa82, 0xa86, 0xa8a, 0xa8e, 0xa92, 0xa96, 0xa9a, 0xa9e, 
  0xaa2, 0xaa6, 0xaaa, 0xaae, 0xab2, 0xab6, 0xaba, 0xabe, 
  0xac2, 0xac6, 0xaca, 0xace, 0xad2, 0xad6, 0xada, 0xade, 
  0xae2, 0xae6, 0xaea, 0xaee, 0xaf2, 0xaf6, 0xafa, 0xafe, 
  0xb02, 0xb06, 0xb0a, 0xb0e, 0xb12, 0xb16, 0xb1a, 0xb1e, 
  0xb22, 0xb26, 0xb2a, 0xb2e, 0xb32, 0xb36, 0xb3a, 0xb3e, 
  0xb42, 0xb46, 0xb4a, 0xb4e, 0xb52, 0xb56, 0xb5a, 0xb5e, 
  0xb62, 0xb66, 0xb6a, 0xb6e, 0xb72, 0xb76, 0xb7a, 0xb7e, 
  0xb82, 0xb86, 0xb8a, 0xb8e, 0xb92, 0xb96, 0xb9a, 0xb9e, 
  0xba2, 0xba6, 0xbaa, 0xbae, 0xbb2, 0xbb6, 0xbba, 0xbbe, 
  0xbc2, 0xbc6, 0xbca, 0xbce, 0xbd2, 0xbd6, 0xbda, 0xbde, 
  0xbe2, 0xbe6, 0xbea, 0xbee, 0xbf2, 0xbf6, 0xbfa, 0xbfe, 
  0xc02, 0xc06, 0xc0a, 0xc0e, 0xc12, 0xc16, 0xc1a, 0xc1e, 
  0xc22, 0xc26, 0xc2a, 0xc2e, 0xc32, 0xc36, 0xc3a, 0xc3e, 
  0xc42, 0xc46, 0xc4a, 0xc4e, 0xc52, 0xc56, 0xc5a, 0xc5e, 
  0xc62, 0xc66, 0xc6a, 0xc6e, 0xc72, 0xc76, 0xc7a, 0xc7e, 
  0xc82, 0xc86, 0xc8a, 0xc8e, 0xc92, 0xc96, 0xc9a, 0xc9e, 
  0xca2, 0xca6, 0xcaa, 0xcae, 0xcb2, 0xcb6, 0xcba, 0xcbe, 
  0xcc2, 0xcc6, 0xcca, 0xcce, 0xcd2, 0xcd6, 0xcda, 0xcde, 
  0xce2, 0xce6, 0xcea, 0xcee, 0xcf2, 0xcf6, 0xcfa, 0xcfe, 
  0xd02, 0xd06, 0xd0a, 0xd0e, 0xd12, 0xd16, 0xd1a, 0xd1e, 
  0xd22, 0xd26, 0xd2a, 0xd2e, 0xd32, 0xd36, 0xd3a, 0xd3e, 
  0xd42, 0xd46, 0xd4a, 0xd4e, 0xd52, 0xd57, 0xd5b, 0xd5f, 
  0xd63, 0xd67, 0xd6b, 0xd6f, 0xd73, 0xd77, 0xd7b, 0xd7f, 
  0xd83, 0xd87, 0xd8b, 0xd8f, 0xd93, 0xd97, 0xd9b, 0xd9f, 
  0xda3, 0xda7, 0xdab, 0xdaf, 0xdb3, 0xdb7, 0xdbb, 0xdbf, 
  0xdc3, 0xdc7, 0xdcb, 0xdcf, 0xdd3, 0xdd7, 0xddb, 0xddf, 
  0xde3, 0xde7, 0xdeb, 0xdef, 0xdf3, 0xdf7, 0xdfb, 0xdff, 
  0xe03, 0xe07, 0xe0b, 0xe0f, 0xe13, 0xe17, 0xe1b, 0xe1f, 
  0xe23, 0xe27, 0xe2b, 0xe2f, 0xe33, 0xe37, 0xe3b, 0xe3f, 
  0xe43, 0xe47, 0xe4b, 0xe4f, 0xe53, 0xe57, 0xe5b, 0xe5f, 
  0xe63, 0xe67, 0xe6b, 0xe6f, 0xe73, 0xe77, 0xe7b, 0xe7f, 
  0xe83, 0xe87, 0xe8b, 0xe8f, 0xe93, 0xe97, 0xe9b, 0xe9f, 
  0xea3, 0xea7, 0xeab, 0xeaf, 0xeb3, 0xeb7, 0xebb, 0xebf, 
  0xec3, 0xec7, 0xecb, 0xecf, 0xed3, 0xed7, 0xedb, 0xedf, 
  0xee3, 0xee7, 0xeeb, 0xeef, 0xef3, 0xef7, 0xefb, 0xeff, 
  0xf03, 0xf07, 0xf0b, 0xf0f, 0xf13, 0xf17, 0xf1b, 0xf1f, 
  0xf23, 0xf27, 0xf2b, 0xf2f, 0xf33, 0xf37, 0xf3b, 0xf3f, 
  0xf43, 0xf47, 0xf4b, 0xf4f, 0xf53, 0xf57, 0xf5b, 0xf5f, 
  0xf63, 0xf67, 0xf6b, 0xf6f, 0xf73, 0xf77, 0xf7b, 0xf7f, 
  0xf83, 0xf87, 0xf8b, 0xf8f, 0xf93, 0xf97, 0xf9b, 0xf9f, 
  0xfa3, 0xfa7, 0xfab, 0xfaf, 0xfb3, 0xfb7, 0xfbb, 0xfbf, 
  0xfc3, 0xfc7, 0xfcb, 0xfcf, 0xfd3, 0xfd7, 0xfdb, 0xfdf, 
  0xfe3, 0xfe7, 0xfeb, 0xfef, 0xff3, 0xff7, 0xffb, 0xfff
};

// FUNCTION: Random, POINTS: 1024, BITS: 12, LOW: 0, HIGH: 4095
int randomData[] = {
  0xa4d, 0xcb2, 0xc8f, 0xe71, 0xd79, 0x14e, 0x30c, 0x9df, 
  0xbf3, 0xb9e, 0xcab, 0xef2, 0x11c, 0x95c, 0x8b8, 0x30e, 
  0xecb, 0xe8a, 0xbb2, 0xef8, 0x94c, 0x3c1, 0x69f, 0x81c, 
  0x66f, 0xf42, 0x20b, 0x6b7, 0x9d3, 0x6ac, 0x2e3, 0x5ac, 
  0x2af, 0x45f, 0x2ae, 0xb50, 0x6cc, 0x885, 0x2df, 0x64e, 
  0x5cf, 0xa43, 0x677, 0x118, 0x051, 0x7aa, 0x3b8, 0x09a, 
  0xe69, 0x524, 0xdc0, 0xebc, 0x76f, 0x5b7, 0x352, 0x60f, 
  0xf23, 0x5a7, 0x40f, 0x799, 0xb2b, 0xd3d, 0x961, 0xb67, 
  0xcd9, 0x364, 0x611, 0x3af, 0xb22, 0xaaa, 0xb35, 0x627, 
  0x3a2, 0x511, 0x757, 0x746, 0xb46, 0xaff, 0x23b, 0x360, 
  0x816, 0xdd3, 0x5c2, 0x59e, 0xb8d, 0x8a4, 0x52e, 0x92c, 
  0xaf7, 0x3c4, 0x90c, 0x2ac, 0x5e9, 0xb8a, 0xa8d, 0x5ca, 
  0x90f, 0x3d4, 0x603, 0x09a, 0xe92, 0x5e6, 0xd27, 0xd23, 
  0x2f3, 0xf07, 0x403, 0x1d6, 0xd03, 0x7af, 0x939, 0x733, 
  0x41e, 0x9d6, 0xf3e, 0x8e6, 0x57b, 0x81d, 0xb4f, 0xd65, 
  0x5e6, 0xf62, 0xf69, 0xae8, 0x70f, 0xa47, 0x988, 0x35f, 
  0x755, 0x6d1, 0x0d8, 0x1a1, 0x97a, 0xc12, 0xec7, 0x9dd, 
  0xaf2, 0x22e, 0x815, 0xd61, 0x54f, 0x4e2, 0xb9f, 0x413, 
  0x072, 0x5a6, 0xf50, 0xc53, 0x73c, 0x502, 0x161, 0xf0d, 
  0x5d7, 0xbfc, 0x658, 0xe68, 0xf33, 0x19b, 0xd3e, 0xf43, 
  0x799, 0xae9, 0x63e, 0x9a6, 0x920, 0x9a0, 0xffa, 0xac7, 
  0x633, 0xcdb, 0x4ed, 0xb97, 0xdf9, 0xbab, 0x495, 0x977, 
  0x5b1, 0xc9a, 0x5c7, 0xb64, 0xa0c, 0xf4e, 0xbeb, 0x8df, 
  0x264, 0x9f7, 0xf9c, 0x218, 0xc79, 0x33e, 0x8ea, 0x8a8, 
  0x139, 0x823, 0xe54, 0x5d4, 0x167, 0x393, 0x14d, 0xddd, 
  0x8bd, 0x6b8, 0x3e4, 0xa26, 0x4bf, 0x454, 0xb6b, 0xde2, 
  0x840, 0x943, 0x340, 0x8e8, 0x1c8, 0x038, 0x592, 0x911, 
  0xecf, 0x2b9, 0xfbe, 0x4d6, 0xea3, 0xbce, 0x0d2, 0x122, 
  0x315, 0x97b, 0x9f3, 0xf49, 0xecc, 0xc56, 0xa37, 0xb1f, 
  0xc75, 0xc0e, 0xe75, 0xea7, 0xef6, 0x51c, 0x715, 0x440, 
  0xc74, 0x6a5, 0x80c, 0x12b, 0x642, 0x010, 0x7e0, 0xec6, 
  0xc79, 0xb2f, 0xfdd, 0xa1c, 0x5da, 0x460, 0xc2d, 0xdc2, 
  0x5e1, 0xd65, 0xb0b, 0x8f1, 0x0af, 0x146, 0xf4c, 0x907, 
  0xd12, 0x3bf, 0xe05, 0xe9e, 0x70e, 0xd23, 0xd49, 0xac5, 
  0x1f8, 0xe38, 0x647, 0x2cd, 0x384, 0x48e, 0x889, 0x8de, 
  0x48e, 0xa93, 0x5a3, 0xcb9, 0xac6, 0x0db, 0x3c2, 0xcf3, 
  0x2eb, 0x759, 0x8bf, 0x621, 0xe1a, 0xfe1, 0x3ad, 0x155, 
  0x960, 0x880, 0x73c, 0x86d, 0x3ea, 0xbea, 0xb44, 0x939, 
  0x1a0, 0x79f, 0x7e0, 0xaeb, 0x784, 0xbf9, 0x21b, 0xe4f, 
  0x483, 0xb1f, 0xb93, 0xba7, 0x8ef, 0xbd1, 0x261, 0x173, 
  0xb7a, 0x12a, 0x52c, 0xd23, 0xd1a, 0x502, 0xfe1, 0x2bb, 
  0x3b6, 0xd12, 0x74d, 0x64d, 0xdfb, 0x1a4, 0x634, 0xb43, 
  0xee1, 0xcf5, 0x68c, 0xa1f, 0x5a4, 0x8f6, 0x3b0, 0x136, 
  0xd11, 0x796, 0xec6, 0x199, 0x614, 0x89c, 0x2cf, 0x459, 
  0xe40, 0x23d, 0x583, 0xc3f, 0xc6f, 0x3a2, 0xc78, 0x749, 
  0x434, 0xd01, 0xe30, 0x8a4, 0x8b0, 0xfcc, 0xfd1, 0xbea, 
  0xb7f, 0x1c4, 0x6a8, 0x509, 0x861, 0xc31, 0x94e, 0x30f, 
  0x0d2, 0x32c, 0x98e, 0x6d8, 0xfdc, 0xad5, 0x3fb, 0x2e9, 
  0xa67, 0x197, 0xdf9, 0x5bf, 0x886, 0x685, 0xd7d, 0x9da, 
  0xef2, 0x356, 0xf0d, 0x0e0, 0x3c2, 0x375, 0xcfb, 0x3f9, 
  0x8a9, 0x82e, 0x161, 0x8fa, 0x7ec, 0x1be, 0x8f6, 0x2ce, 
  0x1a3, 0x3b4, 0x638, 0x172, 0xfbb, 0x333, 0x113, 0xc28, 
  0x71b, 0xef1, 0x34d, 0xdc3, 0x123, 0xa53, 0x5dd, 0x64c, 
  0xa07, 0x1af, 0x065, 0x778, 0x306, 0xd6a, 0x57e, 0xba7, 
  0xab2, 0xf67, 0xdd6, 0x838, 0xec3, 0xe88, 0xa83, 0xe23, 
  0xe77, 0xc3a, 0x111, 0xf8d, 0xe22, 0x741, 0xd46, 0xc4b, 
  0x9cf, 0xf76, 0xef2, 0xd61, 0xb7a, 0xd9e, 0x494, 0x740, 
  0x809, 0xb9f, 0x618, 0xc1d, 0x232, 0x852, 0xd0b, 0x1b8, 
  0xac5, 0x02f, 0x7f4, 0xf00, 0xf49, 0x154, 0x0d5, 0xbe0, 
  0xbeb, 0x21e, 0x41f, 0xf6c, 0x172, 0x4fe, 0x4d9, 0x36e, 
  0x6c8, 0x72a, 0xa3c, 0xc8f, 0xb42, 0x774, 0x895, 0xf62, 
  0x12b, 0xb1c, 0x1f3, 0x0c6, 0xfe6, 0x3f4, 0x139, 0xfc3, 
  0xa34, 0xc50, 0xdaf, 0x92c, 0x07b, 0x4e3, 0x89f, 0x59e, 
  0xf46, 0xb99, 0x2f3, 0x20d, 0x769, 0x618, 0x403, 0x62e, 
  0xbb2, 0x1bd, 0x9a8, 0xa8c, 0xe35, 0x859, 0xd5d, 0x49c, 
  0xc5b, 0x498, 0x764, 0x4a4, 0xe6d, 0xa3b, 0xbd7, 0xded, 
  0xb88, 0x2aa, 0x80c, 0xa16, 0x4a5, 0xcda, 0x7c9, 0xf6e, 
  0x464, 0x162, 0xa04, 0x3da, 0x67a, 0x713, 0x634, 0x084, 
  0x7a2, 0xb66, 0x38b, 0xb7d, 0x440, 0x78b, 0xdc5, 0x9c7, 
  0xa02, 0xcfa, 0x6e6, 0x02d, 0xbd8, 0x467, 0x35d, 0xecf, 
  0x2e9, 0x672, 0x9aa, 0x0d5, 0xf88, 0xc3b, 0x3ab, 0x191, 
  0x545, 0x4f6, 0x6a1, 0xaf1, 0x8e4, 0x82f, 0x4bd, 0xc3a, 
  0x846, 0x0c5, 0xcb8, 0xbcb, 0x554, 0xfda, 0xf8e, 0x502, 
  0x34b, 0x9f4, 0x263, 0xec6, 0x9f4, 0x340, 0x3ef, 0x17a, 
  0x149, 0x0b2, 0x2d9, 0x958, 0xfdb, 0x524, 0x9d8, 0x2b5, 
  0x13b, 0x208, 0xf05, 0x4e3, 0x493, 0x7d0, 0x9ca, 0x118, 
  0xb3c, 0xb15, 0x531, 0x9e9, 0x654, 0x7a7, 0x6e0, 0x5df, 
  0xc83, 0xcfb, 0x45e, 0x1da, 0xd3f, 0x468, 0xdcb, 0x7a9, 
  0x254, 0xc0c, 0xd26, 0x52a, 0x626, 0x625, 0x94e, 0x824, 
  0x1fe, 0x5c8, 0x74d, 0x66a, 0x8a5, 0x0db, 0xd36, 0x36c, 
  0x1d1, 0x404, 0x2f4, 0xe69, 0xfb4, 0xb42, 0xc55, 0x9e0, 
  0xb8a, 0xc6f, 0xb9c, 0x748, 0xab9, 0x4c7, 0x6d7, 0x186, 
  0xdfe, 0x52a, 0x149, 0x819, 0xb7b, 0x91e, 0x020, 0x8b0, 
  0x4b9, 0xe8e, 0x49a, 0x6ec, 0x3f1, 0xb4b, 0x0bd, 0x31f, 
  0x918, 0x6ad, 0xae3, 0xe98, 0xf0d, 0x78b, 0x4ec, 0xecb, 
  0xc06, 0x4d6, 0x65c, 0xa32, 0xdbd, 0x405, 0xca3, 0xc7a, 
  0x506, 0x319, 0xa81, 0x084, 0x11e, 0x3a3, 0xeab, 0xe11, 
  0x71e, 0x151, 0xde1, 0x6b0, 0xc70, 0xa5e, 0x9db, 0x720, 
  0x3e4, 0xfb3, 0xda5, 0x821, 0x070, 0x89d, 0x816, 0xc82, 
  0x162, 0x0db, 0x859, 0xd6b, 0x7a6, 0xba3, 0xa3d, 0x56f, 
  0xc5c, 0x168, 0xb7b, 0x223, 0x7e9, 0xcfd, 0x82f, 0x2c2, 
  0x3bc, 0xe47, 0x146, 0x682, 0xf2d, 0x376, 0x660, 0x96a, 
  0xbdf, 0xc5a, 0x2e8, 0x0d3, 0xe6d, 0x007, 0x3b1, 0xc85, 
  0xfca, 0xca0, 0xd45, 0xa38, 0x4e0, 0xa4a, 0x8bc, 0x32e, 
  0xc89, 0x1ae, 0x6b3, 0x2e9, 0x603, 0x605, 0x605, 0xf37, 
  0x5be, 0x527, 0x7ef, 0x567, 0x3e2, 0xda8, 0x73e, 0x7f2, 
  0x521, 0x5f4, 0x97f, 0xfd8, 0x09a, 0x942, 0x57d, 0xd30, 
  0x933, 0x600, 0x9a3, 0x165, 0x2cf, 0xcf4, 0x2b3, 0x20f, 
  0x3cc, 0x290, 0x88b, 0xbbd, 0x518, 0x96a, 0xcfd, 0xd73, 
  0xe21, 0x0a4, 0xe48, 0xac0, 0x49a, 0x6db, 0x409, 0x317, 
  0xadf, 0x225, 0xe9c, 0xdab, 0xf1b, 0xba7, 0x8dd, 0x9c0, 
  0xbe4, 0x685, 0x6ed, 0xc7f, 0xaff, 0x286, 0x3d0, 0xadf, 
  0x5bb, 0xc4e, 0x1cf, 0xd7e, 0x0a7, 0x3b6, 0xf26, 0xa85, 
  0x63f, 0x536, 0x5c5, 0x4fa, 0xca7, 0x020, 0x734, 0xe68, 
  0xa0c, 0xeb6, 0x91d, 0x22d, 0xb98, 0x00e, 0x0b0, 0x132, 
  0xf13, 0x5be, 0x613, 0xe49, 0x95b, 0x149, 0x068, 0xc76, 
  0x9fc, 0x085, 0x605, 0xac0, 0xd21, 0x2f8, 0x735, 0xa6e, 
  0xaf0, 0x2b7, 0xc95, 0x889, 0x47c, 0x702, 0xe1d, 0xfb4, 
  0x18c, 0x7df, 0x1bc, 0xe41, 0xff0, 0xe78, 0xa23, 0xa35, 
  0x80c, 0x0a8, 0x0aa, 0x42e, 0x511, 0xaad, 0xcdd, 0xe27, 
  0xca7, 0xce8, 0xb6e, 0x999, 0x382, 0x329, 0x6eb, 0xa35, 
  0x43e, 0x90c, 0xa2c, 0x614, 0x15d, 0xdcc, 0x87f, 0xdb2, 
  0x1e4, 0x15b, 0xc51, 0xabb, 0x76a, 0x1fa, 0xf3c, 0xaaf, 
  0xd46, 0xc1e, 0x392, 0x153, 0x49f, 0x034, 0x545, 0x2aa, 
  0xc74, 0xd5a, 0xecc, 0x29f, 0x172, 0x4af, 0x501, 0x511, 
  0xd83, 0xd43, 0x3bd, 0x738, 0xe02, 0xab1, 0xe41, 0xdeb, 
  0x290, 0xcf6, 0x2de, 0x2db, 0xedd, 0x013, 0x8f4, 0x65b, 
  0xfe8, 0xc26, 0xad7, 0x6b7, 0x7b3, 0xc01, 0xa8a, 0xb71, 
  0x027, 0xec4, 0xc84, 0x4df, 0xd58, 0x428, 0xdbf, 0x842, 
  0x489, 0x4fd, 0xde3, 0xd7f, 0xf5e, 0xfc5, 0x7ae, 0x28c, 
  0x87b, 0x48c, 0x29f, 0xfd8, 0xf68, 0xa81, 0xc83, 0x3cc, 
  0xea7, 0xa72, 0xbc1, 0x18e, 0x862, 0xe62, 0xf9d, 0x56d, 
  0x361, 0x5df, 0x8ef, 0xbf6, 0x3dd, 0x210, 0xc34, 0x6fb, 
  0x589, 0x9c4, 0xcf7, 0xf21, 0x563, 0xddf, 0xe85, 0xdd5, 
  0xeae, 0x1e7, 0x992, 0xbda, 0xd2c, 0x0c7, 0xea4, 0xf40, 
  0xcbf, 0xea7, 0x9d2, 0x590, 0x5d4, 0x94e, 0x4d8, 0xc61, 
  0x231, 0x64c, 0xed2, 0x592, 0x21e, 0x213, 0xdac, 0x69c, 
  0x771, 0x14a, 0xbfc, 0x14e, 0x963, 0xaa1, 0xf7d, 0x4e9
};

// TODO: Separate out sine (table based) and others which can be specified via parameters
// TODO: Others being square, ramp, steps and triangle - parameters being frequency, duty cycle etc
// TODO: Also inverted option, modulation - see square wave

// Looks like DUE is limited to 133kHZ for a simple square wave at 50% duty cycle

const int FREQS = 0;
const int DELAYS = 1;

void playWave(int waveData[], int NUM_SAMPLES, int freq, int seconds, int mode) {

  char msg[240];

  // sprintf(msg, "#SAMPLES = %d", NUM_SAMPLES);
  // Serial.println(msg);

  int pSecDelay = 1000000000 / (NUM_SAMPLES * freq);
  int uSecDelay = 1000000 / (NUM_SAMPLES * freq);

  int error = pSecDelay % 1000;

  const int PER_SAMPLE_ERROR = 0;  // ps overhead

  if (mode == DELAYS) {
    uSecDelay = freq;
    if (uSecDelay == 0) {
      freq = 1000;  // Fastest possible
    } else {
      freq = 1000000 / (NUM_SAMPLES * uSecDelay);
    }
  }

  // 10s of signal generation
  const int CYCLES = seconds * freq;

  // sprintf(msg, "MODE=%s: f=%d, d=%d us, #c=%d", mode == DELAYS ? "DELAY" : "FREQ", freq, uSecDelay, CYCLES);
  // Serial.println(msg);
  // sprintf(msg, "ERROR=%d, d=%ld ps", error, pSecDelay);
  // Serial.println(msg);

  int currError = 0;
  int extraDelay = 0;
  int adjusts = 0;

  for (int c = 0; c < CYCLES; c++) {
    analogWrite(DAC1, c % 2 == 0 ? 0xfff : 0);

    if ((c + 1) % freq == 0 || c == 0) {
      // NOTE: 12bit PWM
      int led_pwm = 4095;
      if (c != 0) led_pwm = 4095 - (4095 * ((c + 1) / freq) / seconds);
      analogWrite(PWM_LED, led_pwm);
    }

    for (int i = 0; i < NUM_SAMPLES; i++) {
      // Sawtooth - with sub-sampling
      //      int numRamps = 16;  // Or frequency, but with 'sub-sampling'
      //
      //      analogWrite(DAC0, (( i * numRamps ) % NUM_SAMPLES) * 0xfff / NUM_SAMPLES );  // Same speed as cycle as no sub-sampling

      // Square - the fastest. Need rate and duty cycle. Some cheeky modulation here though
      //        if ( i % 2 == 0 ) {
      //          analogWrite(DAC0, 0xfff - c/4);
      //        } else {
      //          analogWrite(DAC0, 0x0 + c/2);
      //        }

      // Sine - with sub-sampling. TODO: Figure out sub-sample values for 'higher' frequencies
      if (i % 5 == 0) {
        int d = waveData[i] / 2 + (4095 / 4 * 2);  // Adds DC offset to output to keep LED forward biased
                                                   // waveData[i] / 4 + (4095 / 4 * 3) for BLUE LEDs

        analogWrite(DAC0, waveData[i]);  // or d

        // Add this for XY plots of lissajous figures
        // MCP.setValue(waveData[(i+NUM_SAMPLES/4)%NUM_SAMPLES]);  // cos
      }

      if ( currError >= 1000 ) {
        extraDelay = 1;
        currError -= 1000;
        adjusts ++;
      } else if ( currError <= -1000 ) {
        if ( uSecDelay > 0 ) {
          extraDelay = -1;
        } else {
          extraDelay = 0;
        }
        currError += 1000;
        adjusts ++;
      } else {
        extraDelay = 0;
      }

      delayMicroseconds(uSecDelay + extraDelay);

      currError += (error - PER_SAMPLE_ERROR);
    }
  }

  // sprintf(msg, "ERROR ADJUSTS=%d", adjusts);
  // Serial.println(msg);
}

int freqs[] = { 1, 5, 10, 30, 50, 100 };  //, 400, 750, 1000 };
int delays[] = { 0, 1, 2, 4, 5, 10, 15, 25, 50, 75, 100 };

void theWaves() {
  const int NUM_FREQS = sizeof(freqs) / sizeof(int);

  for (int f = 0; f < NUM_FREQS; f++) {
    playWave(sineData, 1024, freqs[f], 10, FREQS);
    playWave(triangleData, 1024, freqs[f], 10, FREQS);
    playWave(squareData, 1024, freqs[f], 10, FREQS);
    playWave(rampData, 1024, freqs[f], 10, FREQS);
    playWave(impulseData, 1024, freqs[f], 10, FREQS);
  }
}

void sineWaves2() {
  const int NUM_DELAYS = sizeof(delays) / sizeof(int);

  for (int d = 0; d < NUM_DELAYS; d++) {
    playWave(sineData, 1024, delays[d], 10, DELAYS);
  }
}

void loop() {
  theWaves();

  //  sineWaves2();

  // sineWave(3, 30);

  // checkPir();

  // testSpiral();

  // bigCounter();

  // nowServing();

  // scrollString( SIZE, DEVICES, "Hello there Jenny, hello there Iman!, Yo POPS :)" );

  // tempAndHumidity();

  // scrollAnimationLoop( 10 );

  // phpIs();

  // animationTest();

  // gameOfLife();

  // writeArduinoOnMatrix();
}
